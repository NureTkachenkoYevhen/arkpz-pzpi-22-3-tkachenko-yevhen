Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 

ЗВІТ 
до практичного заняття № 2 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: “Методи рефакторингу”
                                                                 
Виконав: 
ст. гр ПЗПІ-22-3  							    
Ткаченко Євген Андрійович

Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 


Харків 2024
1 МЕТА 
Навчитися методам рефакторингу програмного коду у Java

2 ХІД РОБОТИ
Було обрано мову програмування Java. У презентації (Додаток В) було наведено приклади використання методів рефакторингу Інкапсуляція полів, Приховування методу та Інкапсуляції колекцій. У додатку Б наведений вихідний код.

2.1 Інкапсуляція полів.

Інкапсуляція Поля (Encapsulate Field) — це метод рефакторингу, який передбачає зміну прямого доступу до поля класу через створення геттерів і сеттерів. (методів для отримання та встановлення значень).
Переваги:
Забезпечення безпеки даних.
Можливість додавання додаткової логіки під час доступу до полів.
Підтримка нових змін без впливу на інші частини коду.

2.2 Приклад до рефакторингу за допомогю приховування методу.

Відступи: використовуйте 4 пробіли для відступів. Це значно покращує читабельність коду.
Довжина рядка: обмежуйте довжину рядка до 80 символів, щоб уникнути горизонтального прокручування.
Розташування фігурних дужок: у Java прийнято відкривати фігурну дужку на тій же лінії, де починається конструкція (метод чи цикл).

2.3 Інкапсуляція колекцій.

Інкапсуляція колекцій (Encapsulate Collection) — це метод рефакторингу, який передбачає інкапсуляцію доступу до колекції. Замість надання прямого доступу до колекції, створюються методи для додавання, видалення або отримання елементів.
Переваги:
Забезпечує контроль над модифікаціями колекції.
Запобігає порушенню цілісності даних через некоректні зміни.
Не дозволяє зовнішньому коду безпосередньо робити зміни над колекцією.

ВИСНОВКИ 
	У результаті роботи я дослідив та використав на практиці методи рефакторингу коду у Java.

ДОДАТОК A
Посилання на відео

https://youtu.be/p9RqeAnCSBg


ДОДАТОК Б
Вихідний код

1. public class User {
2.     public String email;
3. 
4.     public User(String email){
5.         this.email = email;
6.     }
7. }
8. 
9. public class Main {
10.     public static void main(String[] args) {
11.         User user = new User("example@gmail.com");
12. 
13.         user.email = "email.com";
14.         System.out.println(user.email);
15.     }
16. }

1. public class User {
2.     private String email;
3. 
4.     public User(String email) {
5.         setEmail(email);
6.     }
7.     public String getEmail() {
8.         return email;
9.     }
10.     public void setEmail(String email) {
11.         if (email == null || !email.contains("@")) {
12.             throw new IllegalArgumentException("Invalid email");
13.         }
14.         this.email = email;
15.     }
16. }
17. 
18. public class Main {
19.     public static void main(String[] args) {
20.         try {
21.             User user = new User("example@gmail.com");
22.             user.setEmail("email.com");
23.         } catch (IllegalArgumentException e) {
24.             System.err.println("Error: " + e.getMessage());
25.         }
26.     }
27. }

1. public class UserService {
2.     public String hashPassword(String password) {
3.         return Base64.getEncoder().encodeToString(password.getBytes());
4.     }
5. 
6.     public User createUser(String username, String password) {
7.         String hashedPassword = hashPassword(password);
8.         User user = new User(username, hashedPassword);
9.         return user;
10.     }
11. }
12. public class Main {
13.     public static void main(String[] args) {
14.         UserService userService = new UserService();
15.         String password = userService.hashPassword("123456");
16.         User user = userService.createUser("TestUsername", password);
17.     }
18. }

1. public class UserService {
2.     private String hashPassword(String password) {
3.         return Base64.getEncoder().encodeToString(password.getBytes());
4.     }
5. 
6.     public User createUser(String username, String password) {
7.         String hashedPassword = hashPassword(password);
8.         User user = new User(username, hashedPassword);
9.         return user;
10.     }
11. }
12. 
13. public class Main {
14.     public static void main(String[] args) {
15.         UserService userService = new UserService();
16.         User user = userService.createUser("TestUsername", "123456");
17.     }
18. }

1. public class Team {
2.     private String name;
3.     private List<User> members;
4. 
5.     public Team(String name) {
6.         this.name = name;
7.         this.members = new ArrayList<>();
8.     }
9. 
10.     public List<User> getMembers() {
11.         return members;
12.     }
13. }
14. 
15. public class Main {
16.     public static void main(String[] args) {
17.         Team team = new Team("KharkivTeam");
18.         team.getMembers().add(new User("Yevhen"));
19.         team.getMembers().add(new User("Yevhen"));
20.         team.getMembers().clear();
21.     }
22. }

1. public class Team {
2.     private String name;
3.     private List<User> members;
4. 
5.     public Team(String name) {
6.         this.name = name;
7.         this.members = new ArrayList<>();
8.     }
9. 
10.     public List<User> getMembers() {
11.         return Collections.unmodifiableList(members);
12.     }
13. 
14.     public void addMember(User member) {
15.         if (!members.contains(member)) {
16.             members.add(member);
17.         }
18.     }
19. 
20.     public void removeMember(User member) {
21.         members.remove(member);
22.     }
23. }
24. 
25. public class Main {
26.     public static void main(String[] args) {
27.         Team team = new Team("KharkivTeam");
28.         team.addMember(new User("Yevhen"));
29.         team.addMember(new User("Yevhen"));
30.         team.getMembers().clear(); // UnsupportedOperationException
31.     }
32. }







ДОДАТОК В
Презентація pzpi-22-3-tkachenko-yevhen-pract2.pptx
 
Рисунок В.1 – Титульний лист

 
Рисунок В.2 – Інкапсуляція полів.

 
Рисунок В.3 – Приклад до рефакторингу за допомогю інкапсуляції полів.

 
Рисунок В.4 – Приклад після рефакторингу за допомогю інкапсуляції полів.


Рисунок В.5 – Приховування методу.

 
Рисунок В.6 – Приклад до рефакторингу за допомогю приховування методу.

 
Рисунок В.7 – Приклад після рефакторингу за допомогю приховування методу.

 
Рисунок В.8 – Інкапсуляція колекцій.

 
Рисунок В.9 – Приклад до рефакторингу за допомогю інкапсуляції колекцій.

 
Рисунок В.10 – Приклад після рефакторингу за допомогю приховування методу.

 
Рисунок В.11 – Список використаних джерел.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

	1. Java Code Conventions. Oracle. URL: https://www.oracle.com/java/technologies/javase/codeconventions-contents.html (дата використання: 27.11.2024)
