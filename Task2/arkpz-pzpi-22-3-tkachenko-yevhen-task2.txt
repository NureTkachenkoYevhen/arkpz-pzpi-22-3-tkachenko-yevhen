МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Звіт
з лабораторної роботи №2
 з дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»



Виконав:
 студент групи ПЗПІ-22-3
Ткаченко Євген Андрійович

Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




Харків 2024



1 МЕТА РОБОТИ

Метою лабораторної роботи є розробка бази даних та прикладного програмного інтерфейсу (API) для серверної частини програмної системи для збору та аналізу якості виконання вправ в атлетиці. Це включає створення структури бази даних, розробку функцій для взаємодії з нею, реалізацію API для інтеграції серверної частини з клієнтськими додатками, а також перевірку коректності функціонування створеного коду.

2 ХІД РОБОТИ

Спочатку створено UML діаграму прецедентів для програмної системи для моніторингу та оцінки техніки виконання фізичних вправ. Діаграма прецедентів зображує основні взаємодії користувачів із системою та описує функціональність, яку повинна забезпечити система для досягнення поставленої мети. Ця діаграма наведена в Додатку Б.
Далі була створена ER діаграма для бази даних, на основі якої було сформовано структуру бази даних. ER діаграма наведена у Додатку В.
Технології серверної частини:
Серверна частина реалізована на базі Spring Boot із використанням мови програмування Java. Це надає високу продуктивність та зручність при розробці RESTful API, є вбудована підтримка Swagger/OpenAPI для документації.
Робота з базою даних:
Використовується PostgreSQL як система управління базами даних. Для спрощення роботи з БД застосовується Spring Data JPA, що дозволяє працювати з даними через об'єкти та репозиторії.
Архітектура системи:
Проєкт побудований за модульною архітектурою, що дозволяє чітко розділити логіку:

Controller: обробка HTTP-запитів.
Service: бізнес-логіка системи.
Repository: взаємодія з базою даних.
Mapper: перетворення даних між DTO та сутностями.    
 
ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено базу даних для серверної частини програмної системи для моніторингу та оцінки техніки виконання фізичних вправ. Також було спроектовано та реалізовано API для взаємодії серверної частини з клієнтами, забезпечено його відповідність принципам RESТ. Виконана робота дозволила закріпити навички проектування баз даних, розробки API та інтеграції цих компонентів у програмну систему.















ДОДАТОК А
Посилання на відео

https://youtu.be/2ex4_98DWz4


























ДОДАТОК Б
UML діаграма прецедентів

 
Рисунок Б.1 - UML діаграма прецедентів.




















ДОДАТОК В
ER діаграма

 
Рисунок В.1 - ER діаграма.


















ДОДАТОК Г
Діаграма структури бд

 
Рисунок В.1 - Діаграма структури бд.










ДОДАТОК Ґ
OpenAPI специфікація

1. openapi: 3.0.1
2. info:
3.   title: OpenAPI definition
4.   version: v0
5. servers:
6. - url: http://localhost:8080
7.   description: Generated server url
8. paths:
9.   /api/users/{userId}:
10.     get:
11.       tags:
12.       - user-controller
13.       operationId: getUserById
14.       parameters:
15.       - name: userId
16.         in: path
17.         required: true
18.         schema:
19.           type: integer
20.           format: int64
21.       responses:
22.         "200":
23.           description: OK
24.           content:
25.             '*/*':
26.               schema:
27.                 $ref: "#/components/schemas/UserDto"
28.     put:
29.       tags:
30.       - user-controller
31.       operationId: updateUser
32.       parameters:
33.       - name: userId
34.         in: path
35.         required: true
36.         schema:
37.           type: integer
38.           format: int64
39.       requestBody:
40.         content:
41.           application/json:
42.             schema:
43.               $ref: "#/components/schemas/UserDto"
44.         required: true
45.       responses:
46.         "200":
47.           description: OK
48.           content:
49.             '*/*':
50.               schema:
51.                 $ref: "#/components/schemas/UserDto"
52.     delete:
53.       tags:
54.       - user-controller
55.       operationId: deleteUser
56.       parameters:
57.       - name: userId
58.         in: path
59.         required: true
60.         schema:
61.           type: integer
62.           format: int64
63.       responses:
64.         "200":
65.           description: OK
66.           content:
67.             '*/*':
68.               schema:
69.                 type: string
70.   /api/sessions/{sessionId}:
71.     get:
72.       tags:
73.       - session-controller
74.       operationId: getSessionById
75.       parameters:
76.       - name: sessionId
77.         in: path
78.         required: true
79.         schema:
80.           type: integer
81.           format: int64
82.       responses:
83.         "200":
84.           description: OK
85.           content:
86.             '*/*':
87.               schema:
88.                 $ref: "#/components/schemas/SessionDto"
89.     put:
90.       tags:
91.       - session-controller
92.       operationId: updateSession
93.       parameters:
94.       - name: sessionId
95.         in: path
96.         required: true
97.         schema:
98.           type: integer
99.           format: int64
100.       requestBody:
101.         content:
102.           application/json:
103.             schema:
104.               $ref: "#/components/schemas/SessionDto"
105.         required: true
106.       responses:
107.         "200":
108.           description: OK
109.           content:
110.             '*/*':
111.               schema:
112.                 $ref: "#/components/schemas/SessionDto"
113.     delete:
114.       tags:
115.       - session-controller
116.       operationId: deleteSession
117.       parameters:
118.       - name: sessionId
119.         in: path
120.         required: true
121.         schema:
122.           type: integer
123.           format: int64
124.       responses:
125.         "200":
126.           description: OK
127.           content:
128.             '*/*':
129.               schema:
130.                 type: string
131.   /api/recommendations/{recommendationId}:
132.     put:
133.       tags:
134.       - recommendation-controller
135.       operationId: updateRecommendation
136.       parameters:
137.       - name: recommendationId
138.         in: path
139.         required: true
140.         schema:
141.           type: integer
142.           format: int64
143.       requestBody:
144.         content:
145.           application/json:
146.             schema:
147.               $ref: "#/components/schemas/RecommendationDto"
148.         required: true
149.       responses:
150.         "200":
151.           description: OK
152.           content:
153.             '*/*':
154.               schema:
155.                 $ref: "#/components/schemas/RecommendationDto"
156.     delete:
157.       tags:
158.       - recommendation-controller
159.       operationId: deleteRecommendation
160.       parameters:
161.       - name: recommendationId
162.         in: path
163.         required: true
164.         schema:
165.           type: integer
166.           format: int64
167.       responses:
168.         "200":
169.           description: OK
170.           content:
171.             '*/*':
172.               schema:
173.                 type: string
174.   /api/metrics/{metricId}:
175.     put:
176.       tags:
177.       - metric-controller
178.       operationId: updateMetric
179.       parameters:
180.       - name: metricId
181.         in: path
182.         required: true
183.         schema:
184.           type: integer
185.           format: int64
186.       requestBody:
187.         content:
188.           application/json:
189.             schema:
190.               $ref: "#/components/schemas/MetricDto"
191.         required: true
192.       responses:
193.         "200":
194.           description: OK
195.           content:
196.             '*/*':
197.               schema:
198.                 $ref: "#/components/schemas/MetricDto"
199.     delete:
200.       tags:
201.       - metric-controller
202.       operationId: deleteMetric
203.       parameters:
204.       - name: metricId
205.         in: path
206.         required: true
207.         schema:
208.           type: integer
209.           format: int64
210.       responses:
211.         "200":
212.           description: OK
213.           content:
214.             '*/*':
215.               schema:
216.                 type: string
217.   /api/exercises/{exerciseId}:
218.     get:
219.       tags:
220.       - exercise-controller
221.       operationId: getExerciseById
222.       parameters:
223.       - name: exerciseId
224.         in: path
225.         required: true
226.         schema:
227.           type: integer
228.           format: int64
229.       responses:
230.         "200":
231.           description: OK
232.           content:
233.             '*/*':
234.               schema:
235.                 $ref: "#/components/schemas/ExerciseDto"
236.     put:
237.       tags:
238.       - exercise-controller
239.       operationId: updateExercise
240.       parameters:
241.       - name: exerciseId
242.         in: path
243.         required: true
244.         schema:
245.           type: integer
246.           format: int64
247.       requestBody:
248.         content:
249.           application/json:
250.             schema:
251.               $ref: "#/components/schemas/ExerciseDto"
252.         required: true
253.       responses:
254.         "200":
255.           description: OK
256.           content:
257.             '*/*':
258.               schema:
259.                 $ref: "#/components/schemas/ExerciseDto"
260.     delete:
261.       tags:
262.       - exercise-controller
263.       operationId: deleteExercise
264.       parameters:
265.       - name: exerciseId
266.         in: path
267.         required: true
268.         schema:
269.           type: integer
270.           format: int64
271.       responses:
272.         "200":
273.           description: OK
274.           content:
275.             '*/*':
276.               schema:
277.                 type: string
278.   /api/users:
279.     get:
280.       tags:
281.       - user-controller
282.       operationId: getAllUsers
283.       responses:
284.         "200":
285.           description: OK
286.           content:
287.             '*/*':
288.               schema:
289.                 type: array
290.                 items:
291.                   $ref: "#/components/schemas/UserDto"
292.     post:
293.       tags:
294.       - user-controller
295.       operationId: createUser
296.       requestBody:
297.         content:
298.           application/json:
299.             schema:
300.               $ref: "#/components/schemas/UserDto"
301.         required: true
302.       responses:
303.         "200":
304.           description: OK
305.           content:
306.             '*/*':
307.               schema:
308.                 $ref: "#/components/schemas/UserDto"
309.   /api/sessions:
310.     post:
311.       tags:
312.       - session-controller
313.       operationId: createSession
314.       requestBody:
315.         content:
316.           application/json:
317.             schema:
318.               $ref: "#/components/schemas/SessionDto"
319.         required: true
320.       responses:
321.         "200":
322.           description: OK
323.           content:
324.             '*/*':
325.               schema:
326.                 $ref: "#/components/schemas/SessionDto"
327.   /api/recommendations:
328.     post:
329.       tags:
330.       - recommendation-controller
331.       operationId: createRecommendation
332.       requestBody:
333.         content:
334.           application/json:
335.             schema:
336.               $ref: "#/components/schemas/RecommendationDto"
337.         required: true
338.       responses:
339.         "200":
340.           description: OK
341.           content:
342.             '*/*':
343.               schema:
344.                 $ref: "#/components/schemas/RecommendationDto"
345.   /api/metrics:
346.     post:
347.       tags:
348.       - metric-controller
349.       operationId: createMetric
350.       requestBody:
351.         content:
352.           application/json:
353.             schema:
354.               $ref: "#/components/schemas/MetricDto"
355.         required: true
356.       responses:
357.         "200":
358.           description: OK
359.           content:
360.             '*/*':
361.               schema:
362.                 $ref: "#/components/schemas/MetricDto"
363.   /api/exercises:
364.     get:
365.       tags:
366.       - exercise-controller
367.       operationId: getAllExercises
368.       responses:
369.         "200":
370.           description: OK
371.           content:
372.             '*/*':
373.               schema:
374.                 type: array
375.                 items:
376.                   $ref: "#/components/schemas/ExerciseDto"
377.     post:
378.       tags:
379.       - exercise-controller
380.       operationId: createExercise
381.       requestBody:
382.         content:
383.           application/json:
384.             schema:
385.               $ref: "#/components/schemas/ExerciseDto"
386.         required: true
387.       responses:
388.         "200":
389.           description: OK
390.           content:
391.             '*/*':
392.               schema:
393.                 $ref: "#/components/schemas/ExerciseDto"
394.   /api/sessions/user/{userId}:
395.     get:
396.       tags:
397.       - session-controller
398.       operationId: getSessionsByUserId
399.       parameters:
400.       - name: userId
401.         in: path
402.         required: true
403.         schema:
404.           type: integer
405.           format: int64
406.       responses:
407.         "200":
408.           description: OK
409.           content:
410.             '*/*':
411.               schema:
412.                 type: array
413.                 items:
414.                   $ref: "#/components/schemas/SessionDto"
415.   /api/recommendations/user/{userId}:
416.     get:
417.       tags:
418.       - recommendation-controller
419.       operationId: getRecommendationsByUserId
420.       parameters:
421.       - name: userId
422.         in: path
423.         required: true
424.         schema:
425.           type: integer
426.           format: int64
427.       responses:
428.         "200":
429.           description: OK
430.           content:
431.             '*/*':
432.               schema:
433.                 type: array
434.                 items:
435.                   $ref: "#/components/schemas/RecommendationDto"
436.   /api/metrics/session/{sessionId}:
437.     get:
438.       tags:
439.       - metric-controller
440.       operationId: getMetricsBySessionId
441.       parameters:
442.       - name: sessionId
443.         in: path
444.         required: true
445.         schema:
446.           type: integer
447.           format: int64
448.       responses:
449.         "200":
450.           description: OK
451.           content:
452.             '*/*':
453.               schema:
454.                 type: array
455.                 items:
456.                   $ref: "#/components/schemas/MetricDto"
457. components:
458.   schemas:
459.     UserDto:
460.       type: object
461.       properties:
462.         userId:
463.           type: integer
464.           format: int64
465.         username:
466.           type: string
467.         email:
468.           type: string
469.         password:
470.           type: string
471.         createdAt:
472.           type: string
473.           format: date-time
474.     SessionDto:
475.       type: object
476.       properties:
477.         sessionId:
478.           type: integer
479.           format: int64
480.         userId:
481.           type: integer
482.           format: int64
483.         exerciseId:
484.           type: integer
485.           format: int64
486.         startTime:
487.           type: string
488.           format: date-time
489.         endTime:
490.           type: string
491.           format: date-time
492.         totalReps:
493.           type: integer
494.           format: int32
495.     RecommendationDto:
496.       type: object
497.       properties:
498.         recommendationId:
499.           type: integer
500.           format: int64
501.         userId:
502.           type: integer
503.           format: int64
504.         exerciseId:
505.           type: integer
506.           format: int64
507.         message:
508.           type: string
509.         createdAt:
510.           type: string
511.           format: date-time
512.     MetricDto:
513.       type: object
514.       properties:
515.         metricId:
516.           type: integer
517.           format: int64
518.         sessionId:
519.           type: integer
520.           format: int64
521.         timestamp:
522.           type: string
523.           format: date-time
524.         repNumber:
525.           type: integer
526.           format: int32
527.         height:
528.           type: number
529.           format: float
530.         correctnessScore:
531.           type: number
532.           format: float
533.         session:
534.           type: integer
535.           format: int64
536.           writeOnly: true
537.     ExerciseDto:
538.       type: object
539.       properties:
540.         exerciseId:
541.           type: integer
542.           format: int64
543.         name:
544.           type: string
545.         description:
546.           type: string
547.





















ДОДАТОК Д
Логіка взаємодії серверної частини з БД

1. package com.tkachenko.yevhen.workout.service.impl;
2. 
3. import com.tkachenko.yevhen.workout.dto.UserDto;
4. import com.tkachenko.yevhen.workout.entity.User;
5. import com.tkachenko.yevhen.workout.exception.ResourceNotFoundException;
6. import com.tkachenko.yevhen.workout.mapper.UserMapper;
7. import com.tkachenko.yevhen.workout.repository.UserRepository;
8. import com.tkachenko.yevhen.workout.service.UserService;
9. import org.springframework.security.crypto.password.PasswordEncoder;
10. import org.springframework.stereotype.Service;
11. 
12. import java.util.List;
13. import java.util.stream.Collectors;
14. 
15. 
16. @Service
17. public class UserServiceImpl implements UserService {
18.     private final UserRepository userRepository;
19.     private final PasswordEncoder passwordEncoder;
20. 
21.     public UserServiceImpl(UserRepository userRepository, PasswordEncoder passwordEncoder) {
22.         this.userRepository = userRepository;
23.         this.passwordEncoder = passwordEncoder;
24.     }
25. 
26.     @Override
27.     public UserDto createUser(UserDto userDto) {
28.         User user = UserMapper.mapToUser(userDto);
29. 
30.         user.setPasswordHash(passwordEncoder.encode(userDto.getPassword()));
31. 
32.         User savedUser = userRepository.save(user);
33.         return UserMapper.mapToUserDto(savedUser);
34.     }
35. 
36.     @Override
37.     public UserDto getUserById(Long userId) {
38.         User user = userRepository.findById(userId)
39.                 .orElseThrow(
40.                         () -> new ResourceNotFoundException("User is not exist with given id : " + userId)
41.                 );
42.         return UserMapper.mapToUserDto(user);
43.     }
44. 
45.     @Override
46.     public List<UserDto> getAllUsers() {
47.         List<User> users = userRepository.findAll();
48.         return users.stream().map(UserMapper::mapToUserDto).collect(Collectors.toList());
49.     }
50. 
51.     @Override
52.     public UserDto updateUser(Long userId, UserDto updatedUser) {
53.         User user = userRepository.findById(userId).orElseThrow(
54.                 () -> new ResourceNotFoundException("User is not exist with given id : " + userId));
55. 
56.         user.setUsername(updatedUser.getUsername());
57.         user.setEmail(updatedUser.getEmail());
58. 
59.         if (updatedUser.getPassword() != null && !updatedUser.getPassword().isEmpty()) {
60.             user.setPasswordHash(passwordEncoder.encode(updatedUser.getPassword()));
61.         }
62. 
63.         User updatedUserObj = userRepository.save(user);
64.         return UserMapper.mapToUserDto(updatedUserObj);
65.     }
66. 
67.     @Override
68.     public void deleteUser(Long userId) {
69.         userRepository.findById(userId)
70.                 .orElseThrow(
71.                         () -> new ResourceNotFoundException("User is not exist with given id : " + userId)
72.                 );
73. 
74.         userRepository.deleteById(userId);
75.     }
76. }
77.

1. package com.tkachenko.yevhen.workout.service.impl;
2. 
3. import com.tkachenko.yevhen.workout.dto.SessionDto;
4. import com.tkachenko.yevhen.workout.entity.Exercise;
5. import com.tkachenko.yevhen.workout.entity.Session;
6. import com.tkachenko.yevhen.workout.entity.User;
7. import com.tkachenko.yevhen.workout.exception.ResourceNotFoundException;
8. import com.tkachenko.yevhen.workout.mapper.SessionMapper;
9. import com.tkachenko.yevhen.workout.repository.ExerciseRepository;
10. import com.tkachenko.yevhen.workout.repository.SessionRepository;
11. import com.tkachenko.yevhen.workout.repository.UserRepository;
12. import com.tkachenko.yevhen.workout.service.SessionService;
13. import org.springframework.stereotype.Service;
14. 
15. import java.util.List;
16. import java.util.stream.Collectors;
17. 
18. @Service
19. public class SessionServiceImpl implements SessionService {
20.     private final SessionRepository sessionRepository;
21.     private final UserRepository userRepository;
22.     private final ExerciseRepository exerciseRepository;
23. 
24.     public SessionServiceImpl(SessionRepository sessionRepository, UserRepository userRepository, ExerciseRepository exerciseRepository) {
25.         this.sessionRepository = sessionRepository;
26.         this.userRepository = userRepository;
27.         this.exerciseRepository = exerciseRepository;
28.     }
29. 
30.     @Override
31.     public SessionDto createSession(SessionDto sessionDto) {
32.         User user = userRepository.findById(sessionDto.getUserId())
33.                 .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + sessionDto.getUserId()));
34.         Exercise exercise = exerciseRepository.findById(sessionDto.getExerciseId())
35.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + sessionDto.getExerciseId()));
36. 
37.         Session session = SessionMapper.mapToSession(sessionDto, user, exercise);
38.         Session savedSession = sessionRepository.save(session);
39.         return SessionMapper.mapToSessionDto(savedSession);
40.     }
41. 
42.     @Override
43.     public SessionDto getSessionById(Long sessionId) {
44.         Session session = sessionRepository.findById(sessionId)
45.                 .orElseThrow(() -> new ResourceNotFoundException("Session not found with id: " + sessionId));
46.         return SessionMapper.mapToSessionDto(session);
47.     }
48. 
49.     @Override
50.     public List<SessionDto> getSessionsByUserId(Long userId) {
51.         List<Session> sessions = sessionRepository.findByUserUserId(userId);
52.         return sessions.stream().map(SessionMapper::mapToSessionDto).collect(Collectors.toList());
53.     }
54. 
55.     @Override
56.     public SessionDto updateSession(Long sessionId, SessionDto updatedSessionDto) {
57.         Session session = sessionRepository.findById(sessionId)
58.                 .orElseThrow(() -> new ResourceNotFoundException("Session not found with id: " + sessionId));
59. 
60.         User user = userRepository.findById(updatedSessionDto.getUserId())
61.                 .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + updatedSessionDto.getUserId()));
62. 
63.         Exercise exercise = exerciseRepository.findById(updatedSessionDto.getExerciseId())
64.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + updatedSessionDto.getExerciseId()));
65. 
66.         session.setUser(user);
67.         session.setExercise(exercise);
68.         session.setStartTime(updatedSessionDto.getStartTime());
69.         session.setEndTime(updatedSessionDto.getEndTime());
70.         session.setTotalReps(updatedSessionDto.getTotalReps());
71. 
72.         Session updatedSession = sessionRepository.save(session);
73. 
74.         return SessionMapper.mapToSessionDto(updatedSession);
75.     }
76. 
77.     @Override
78.     public void deleteSession(Long sessionId) {
79.         sessionRepository.findById(sessionId)
80.                 .orElseThrow(() -> new ResourceNotFoundException("Session not found with id: " + sessionId));
81. 
82.         sessionRepository.deleteById(sessionId);
83.     }
84. }
85. 
86.

1. package com.tkachenko.yevhen.workout.service.impl;
2. 
3. import com.tkachenko.yevhen.workout.dto.ExerciseDto;
4. import com.tkachenko.yevhen.workout.entity.Exercise;
5. import com.tkachenko.yevhen.workout.exception.ResourceNotFoundException;
6. import com.tkachenko.yevhen.workout.mapper.ExerciseMapper;
7. import com.tkachenko.yevhen.workout.repository.ExerciseRepository;
8. import com.tkachenko.yevhen.workout.service.ExerciseService;
9. import org.springframework.stereotype.Service;
10. 
11. import java.util.List;
12. import java.util.stream.Collectors;
13. 
14. @Service
15. public class ExerciseServiceImpl implements ExerciseService {
16.     private final ExerciseRepository exerciseRepository;
17. 
18.     public ExerciseServiceImpl(ExerciseRepository exerciseRepository) {
19.         this.exerciseRepository = exerciseRepository;
20.     }
21. 
22.     @Override
23.     public ExerciseDto createExercise(ExerciseDto exerciseDto) {
24.         Exercise exercise = ExerciseMapper.mapToExercise(exerciseDto);
25.         Exercise savedExercise = exerciseRepository.save(exercise);
26.         return ExerciseMapper.mapToExerciseDto(savedExercise);
27.     }
28. 
29.     @Override
30.     public ExerciseDto getExerciseById(Long exerciseId) {
31.         Exercise exercise = exerciseRepository.findById(exerciseId)
32.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + exerciseId));
33.         return ExerciseMapper.mapToExerciseDto(exercise);
34.     }
35. 
36.     @Override
37.     public List<ExerciseDto> getAllExercises() {
38.         List<Exercise> exercises = exerciseRepository.findAll();
39.         return exercises.stream().map(ExerciseMapper::mapToExerciseDto).collect(Collectors.toList());
40.     }
41. 
42.     @Override
43.     public ExerciseDto updateExercise(Long exerciseId, ExerciseDto updatedExerciseDto) {
44.         Exercise exercise = exerciseRepository.findById(exerciseId)
45.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + exerciseId));
46. 
47.         exercise.setName(updatedExerciseDto.getName());
48.         exercise.setDescription(updatedExerciseDto.getDescription());
49. 
50.         Exercise updatedExercise = exerciseRepository.save(exercise);
51.         return ExerciseMapper.mapToExerciseDto(updatedExercise);
52.     }
53. 
54.     @Override
55.     public void deleteExercise(Long exerciseId) {
56.         exerciseRepository.findById(exerciseId)
57.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + exerciseId));
58. 
59.         exerciseRepository.deleteById(exerciseId);
60.     }
61. }
62. 
63.

1. package com.tkachenko.yevhen.workout.service.impl;
2. 
3. import com.tkachenko.yevhen.workout.dto.RecommendationDto;
4. import com.tkachenko.yevhen.workout.entity.Exercise;
5. import com.tkachenko.yevhen.workout.entity.Recommendation;
6. import com.tkachenko.yevhen.workout.entity.User;
7. import com.tkachenko.yevhen.workout.exception.ResourceNotFoundException;
8. import com.tkachenko.yevhen.workout.mapper.RecommendationMapper;
9. import com.tkachenko.yevhen.workout.repository.ExerciseRepository;
10. import com.tkachenko.yevhen.workout.repository.RecommendationRepository;
11. import com.tkachenko.yevhen.workout.repository.UserRepository;
12. import com.tkachenko.yevhen.workout.service.RecommendationService;
13. import org.springframework.stereotype.Service;
14. 
15. import java.util.List;
16. import java.util.stream.Collectors;
17. 
18. @Service
19. public class RecommendationServiceImpl implements RecommendationService {
20.     private final RecommendationRepository recommendationRepository;
21.     private final UserRepository userRepository;
22.     private final ExerciseRepository exerciseRepository;
23. 
24.     public RecommendationServiceImpl(RecommendationRepository recommendationRepository, UserRepository userRepository, ExerciseRepository exerciseRepository) {
25.         this.recommendationRepository = recommendationRepository;
26.         this.userRepository = userRepository;
27.         this.exerciseRepository = exerciseRepository;
28.     }
29. 
30.     @Override
31.     public RecommendationDto createRecommendation(RecommendationDto recommendationDto) {
32.         User user = userRepository.findById(recommendationDto.getUserId())
33.                 .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + recommendationDto.getUserId()));
34.         Exercise exercise = exerciseRepository.findById(recommendationDto.getExerciseId())
35.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + recommendationDto.getExerciseId()));
36. 
37.         Recommendation recommendation = RecommendationMapper.mapToRecommendation(recommendationDto, user, exercise);
38.         Recommendation savedRecommendation = recommendationRepository.save(recommendation);
39.         return RecommendationMapper.mapToRecommendationDto(savedRecommendation);
40.     }
41. 
42.     @Override
43.     public List<RecommendationDto> getRecommendationsByUserId(Long userId) {
44.         List<Recommendation> recommendations = recommendationRepository.findByUserUserId(userId);
45.         return recommendations.stream().map(RecommendationMapper::mapToRecommendationDto).collect(Collectors.toList());
46.     }
47. 
48.     @Override
49.     public void deleteRecommendation(Long recommendationId) {
50.         recommendationRepository.findById(recommendationId)
51.                 .orElseThrow(() -> new ResourceNotFoundException("Recommendation not found with id: " + recommendationId));
52.         recommendationRepository.deleteById(recommendationId);
53.     }
54. 
55.     @Override
56.     public RecommendationDto updateRecommendation(Long recommendationId, RecommendationDto recommendationDto) {
57.         Recommendation recommendation = recommendationRepository.findById(recommendationId)
58.                 .orElseThrow(() -> new ResourceNotFoundException("Recommendation not found with id: " + recommendationId));
59. 
60.         User user = userRepository.findById(recommendationDto.getUserId())
61.                 .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + recommendationDto.getUserId()));
62.         Exercise exercise = exerciseRepository.findById(recommendationDto.getExerciseId())
63.                 .orElseThrow(() -> new ResourceNotFoundException("Exercise not found with id: " + recommendationDto.getExerciseId()));
64. 
65.         recommendation.setUser(user);
66.         recommendation.setExercise(exercise);
67.         recommendation.setMessage(recommendationDto.getMessage());
68. 
69.         Recommendation updatedRecommendation = recommendationRepository.save(recommendation);
70.         return RecommendationMapper.mapToRecommendationDto(updatedRecommendation);
71.     }
72. }
73.

1. package com.tkachenko.yevhen.workout.service.impl;
2. 
3. import com.tkachenko.yevhen.workout.dto.MetricDto;
4. import com.tkachenko.yevhen.workout.entity.Exercise;
5. import com.tkachenko.yevhen.workout.entity.Metric;
6. import com.tkachenko.yevhen.workout.entity.Session;
7. import com.tkachenko.yevhen.workout.exception.ResourceNotFoundException;
8. import com.tkachenko.yevhen.workout.mapper.MetricMapper;
9. import com.tkachenko.yevhen.workout.repository.MetricRepository;
10. import com.tkachenko.yevhen.workout.repository.SessionRepository;
11. import com.tkachenko.yevhen.workout.service.MetricService;
12. import org.springframework.stereotype.Service;
13. 
14. import java.util.List;
15. import java.util.stream.Collectors;
16. 
17. @Service
18. public class MetricServiceImpl implements MetricService {
19.     private final MetricRepository metricRepository;
20.     private final SessionRepository sessionRepository;
21. 
22.     public MetricServiceImpl(MetricRepository metricRepository,SessionRepository sessionRepository) {
23.         this.metricRepository = metricRepository;
24.         this.sessionRepository = sessionRepository;
25.     }
26. 
27.     @Override
28.     public MetricDto createMetric(MetricDto metricDto) {
29.         Session session = sessionRepository.findById(metricDto.getSessionId())
30.                 .orElseThrow(() -> new ResourceNotFoundException("Session not found with id: " + metricDto.getSessionId()));
31.         Metric metric = MetricMapper.mapToMetric(metricDto, session);
32.         Metric savedMetric = metricRepository.save(metric);
33.         return MetricMapper.mapToMetricDto(savedMetric);
34.     }
35. 
36.     @Override
37.     public List<MetricDto> getMetricsBySessionId(Long sessionId) {
38.         List<Metric> metrics = metricRepository.findBySessionSessionId(sessionId);
39.         return metrics.stream().map(MetricMapper::mapToMetricDto).collect(Collectors.toList());
40.     }
41. 
42.     @Override
43.     public void deleteMetric(Long metricId) {
44.         metricRepository.findById(metricId)
45.                 .orElseThrow(() -> new ResourceNotFoundException("Metric not found with id: " + metricId));
46. 
47.         metricRepository.deleteById(metricId);
48.     }
49. 
50.     @Override
51.     public MetricDto updateMetric(Long metricId, MetricDto metricDto) {
52.         Metric metric = metricRepository.findById(metricId)
53.                 .orElseThrow(() -> new ResourceNotFoundException("Metric not found with id: " + metricId));
54. 
55.         Session session = sessionRepository.findById(metricDto.getSessionId())
56.                 .orElseThrow(() -> new ResourceNotFoundException("Session not found with id: " + metricDto.getSessionId()));
57. 
58.         metric.setHeight(metricDto.getHeight());
59.         metric.setCorrectnessScore(metricDto.getCorrectnessScore());
60.         metric.setSession(session);
61.         metric.setTimestamp(metricDto.getTimestamp());
62.         metric.setRepNumber(metricDto.getRepNumber());
63. 
64.         Metric updatedMetric = metricRepository.save(metric);
65.         return MetricMapper.mapToMetricDto(updatedMetric);
66.     }
67. }








ДОДАТОК Е
Логіка взаємодії серверної частини з клієнтами

1. package com.tkachenko.yevhen.workout.controller;
2. 
3. import com.tkachenko.yevhen.workout.dto.UserDto;
4. import com.tkachenko.yevhen.workout.service.UserService;
5. import org.springframework.http.HttpStatus;
6. import org.springframework.http.ResponseEntity;
7. import org.springframework.web.bind.annotation.*;
8. 
9. import java.util.List;
10. 
11. @RestController
12. @RequestMapping("/api/users")
13. public class UserController {
14. 
15.     private UserService userService;
16. 
17.     public UserController(UserService userService) {
18.         this.userService = userService;
19.     }
20. 
21.     @PostMapping
22.     public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto) {
23.         UserDto savedUser = userService.createUser(userDto);
24.         return new ResponseEntity<>(savedUser, HttpStatus.CREATED);
25.     }
26. 
27.     @GetMapping("{userId}")
28.     public ResponseEntity<UserDto> getUserById(@PathVariable("userId") Long userId) {
29.         UserDto userDto = userService.getUserById(userId);
30.         return new ResponseEntity<>(userDto, HttpStatus.OK);
31.     }
32. 
33.     @GetMapping()
34.     public ResponseEntity<List<UserDto>> getAllUsers() {
35.         List<UserDto> users = userService.getAllUsers();
36.         return new ResponseEntity<>(users, HttpStatus.OK);
37.     }
38. 
39.     @PutMapping("{userId}")
40.     public ResponseEntity<UserDto> updateUser(
41.             @PathVariable("userId") Long userId,
42.             @RequestBody UserDto updatedDto) {
43.         UserDto userDto = userService.updateUser(userId, updatedDto);
44.         return new ResponseEntity<>(userDto, HttpStatus.OK);
45.     }
46. 
47.     @DeleteMapping("{userId}")
48.     public ResponseEntity<String> deleteUser(@PathVariable("userId") Long userId){
49.         userService.deleteUser(userId);
50.         return new ResponseEntity<>("User deleted successfully.",HttpStatus.OK);
51.     }
52. }

1. package com.tkachenko.yevhen.workout.controller;
2. 
3. import com.tkachenko.yevhen.workout.dto.ExerciseDto;
4. import com.tkachenko.yevhen.workout.service.ExerciseService;
5. import org.springframework.http.HttpStatus;
6. import org.springframework.http.ResponseEntity;
7. import org.springframework.web.bind.annotation.*;
8. 
9. import java.util.List;
10. 
11. @RestController
12. @RequestMapping("/api/exercises")
13. public class ExerciseController {
14. 
15.     private final ExerciseService exerciseService;
16. 
17.     public ExerciseController(ExerciseService exerciseService) {
18.         this.exerciseService = exerciseService;
19.     }
20. 
21.     @PostMapping
22.     public ResponseEntity<ExerciseDto> createExercise(@RequestBody ExerciseDto exerciseDto) {
23.         ExerciseDto savedExercise = exerciseService.createExercise(exerciseDto);
24.         return new ResponseEntity<>(savedExercise, HttpStatus.CREATED);
25.     }
26. 
27.     @GetMapping("{exerciseId}")
28.     public ResponseEntity<ExerciseDto> getExerciseById(@PathVariable("exerciseId") Long exerciseId) {
29.         ExerciseDto exerciseDto = exerciseService.getExerciseById(exerciseId);
30.         return new ResponseEntity<>(exerciseDto, HttpStatus.OK);
31.     }
32. 
33.     @GetMapping
34.     public ResponseEntity<List<ExerciseDto>> getAllExercises() {
35.         List<ExerciseDto> exercises = exerciseService.getAllExercises();
36.         return new ResponseEntity<>(exercises, HttpStatus.OK);
37.     }
38. 
39.     @PutMapping("{exerciseId}")
40.     public ResponseEntity<ExerciseDto> updateExercise(
41.             @PathVariable("exerciseId") Long exerciseId,
42.             @RequestBody ExerciseDto updatedDto) {
43.         ExerciseDto updatedExercise = exerciseService.updateExercise(exerciseId, updatedDto);
44.         return new ResponseEntity<>(updatedExercise, HttpStatus.OK);
45.     }
46. 
47.     @DeleteMapping("{exerciseId}")
48.     public ResponseEntity<String> deleteExercise(@PathVariable("exerciseId") Long exerciseId) {
49.         exerciseService.deleteExercise(exerciseId);
50.         return new ResponseEntity<>("Exercise deleted successfully.", HttpStatus.OK);
51.     }
52. }

1. package com.tkachenko.yevhen.workout.controller;
2. 
3. import com.tkachenko.yevhen.workout.dto.SessionDto;
4. import com.tkachenko.yevhen.workout.service.SessionService;
5. import org.springframework.http.HttpStatus;
6. import org.springframework.http.ResponseEntity;
7. import org.springframework.web.bind.annotation.*;
8. 
9. import java.util.List;
10. 
11. @RestController
12. @RequestMapping("/api/sessions")
13. public class SessionController {
14. 
15.     private final SessionService sessionService;
16. 
17.     public SessionController(SessionService sessionService) {
18.         this.sessionService = sessionService;
19.     }
20. 
21.     @PostMapping
22.     public ResponseEntity<SessionDto> createSession(@RequestBody SessionDto sessionDto) {
23.         SessionDto savedSession = sessionService.createSession(sessionDto);
24.         return new ResponseEntity<>(savedSession, HttpStatus.CREATED);
25.     }
26. 
27.     @GetMapping("{sessionId}")
28.     public ResponseEntity<SessionDto> getSessionById(@PathVariable("sessionId") Long sessionId) {
29.         SessionDto sessionDto = sessionService.getSessionById(sessionId);
30.         return new ResponseEntity<>(sessionDto, HttpStatus.OK);
31.     }
32. 
33.     @GetMapping("/user/{userId}")
34.     public ResponseEntity<List<SessionDto>> getSessionsByUserId(@PathVariable("userId") Long userId) {
35.         List<SessionDto> sessions = sessionService.getSessionsByUserId(userId);
36.         return new ResponseEntity<>(sessions, HttpStatus.OK);
37.     }
38. 
39.     @PutMapping("{sessionId}")
40.     public ResponseEntity<SessionDto> updateSession(
41.             @PathVariable("sessionId") Long sessionId,
42.             @RequestBody SessionDto updatedDto) {
43.         SessionDto updatedSession = sessionService.updateSession(sessionId, updatedDto);
44.         return new ResponseEntity<>(updatedSession, HttpStatus.OK);
45.     }
46. 
47.     @DeleteMapping("{sessionId}")
48.     public ResponseEntity<String> deleteSession(@PathVariable("sessionId") Long sessionId) {
49.         sessionService.deleteSession(sessionId);
50.         return new ResponseEntity<>("Session deleted successfully.", HttpStatus.OK);
51.     }
52. }
53.

1. package com.tkachenko.yevhen.workout.controller;
2. 
3. import com.tkachenko.yevhen.workout.dto.RecommendationDto;
4. import com.tkachenko.yevhen.workout.service.RecommendationService;
5. import org.springframework.http.HttpStatus;
6. import org.springframework.http.ResponseEntity;
7. import org.springframework.web.bind.annotation.*;
8. 
9. import java.util.List;
10. 
11. @RestController
12. @RequestMapping("/api/recommendations")
13. public class RecommendationController {
14. 
15.     private final RecommendationService recommendationService;
16. 
17.     public RecommendationController(RecommendationService recommendationService) {
18.         this.recommendationService = recommendationService;
19.     }
20. 
21.     @PostMapping
22.     public ResponseEntity<RecommendationDto> createRecommendation(@RequestBody RecommendationDto recommendationDto) {
23.         RecommendationDto savedRecommendation = recommendationService.createRecommendation(recommendationDto);
24.         return new ResponseEntity<>(savedRecommendation, HttpStatus.CREATED);
25.     }
26. 
27.     @GetMapping("/user/{userId}")
28.     public ResponseEntity<List<RecommendationDto>> getRecommendationsByUserId(@PathVariable("userId") Long userId) {
29.         List<RecommendationDto> recommendations = recommendationService.getRecommendationsByUserId(userId);
30.         return new ResponseEntity<>(recommendations, HttpStatus.OK);
31.     }
32. 
33.     @DeleteMapping("{recommendationId}")
34.     public ResponseEntity<String> deleteRecommendation(@PathVariable("recommendationId") Long recommendationId) {
35.         recommendationService.deleteRecommendation(recommendationId);
36.         return new ResponseEntity<>("Recommendation deleted successfully.", HttpStatus.OK);
37.     }
38. 
39.     @PutMapping("{recommendationId}")
40.     public ResponseEntity<RecommendationDto> updateRecommendation(
41.             @PathVariable("recommendationId") Long recommendationId,
42.             @RequestBody RecommendationDto updatedDto) {
43.         RecommendationDto updatedRecommendation = recommendationService.updateRecommendation(recommendationId, updatedDto);
44.         return new ResponseEntity<>(updatedRecommendation, HttpStatus.OK);
45.     }
46. }

1. package com.tkachenko.yevhen.workout.controller;
2. 
3. import com.tkachenko.yevhen.workout.dto.MetricDto;
4. import com.tkachenko.yevhen.workout.service.MetricService;
5. import org.springframework.http.HttpStatus;
6. import org.springframework.http.ResponseEntity;
7. import org.springframework.web.bind.annotation.*;
8. 
9. import java.util.List;
10. 
11. @RestController
12. @RequestMapping("/api/metrics")
13. public class MetricController {
14. 
15.     private final MetricService metricService;
16. 
17.     public MetricController(MetricService metricService) {
18.         this.metricService = metricService;
19.     }
20. 
21.     @PostMapping
22.     public ResponseEntity<MetricDto> createMetric(@RequestBody MetricDto metricDto) {
23.         MetricDto savedMetric = metricService.createMetric(metricDto);
24.         return new ResponseEntity<>(savedMetric, HttpStatus.CREATED);
25.     }
26. 
27.     @GetMapping("/session/{sessionId}")
28.     public ResponseEntity<List<MetricDto>> getMetricsBySessionId(@PathVariable("sessionId") Long sessionId) {
29.         List<MetricDto> metrics = metricService.getMetricsBySessionId(sessionId);
30.         return new ResponseEntity<>(metrics, HttpStatus.OK);
31.     }
32. 
33.     @DeleteMapping("{metricId}")
34.     public ResponseEntity<String> deleteMetric(@PathVariable("metricId") Long metricId) {
35.         metricService.deleteMetric(metricId);
36.         return new ResponseEntity<>("Metric deleted successfully.", HttpStatus.OK);
37.     }
38. 
39.     @PutMapping("{metricId}")
40.     public ResponseEntity<MetricDto> updateMetric(
41.             @PathVariable("metricId") Long metricId,
42.             @RequestBody MetricDto updatedDto) {
43.         MetricDto updatedMetric = metricService.updateMetric(metricId, updatedDto);
44.         return new ResponseEntity<>(updatedMetric, HttpStatus.OK);
45.     }
46. }
47.
