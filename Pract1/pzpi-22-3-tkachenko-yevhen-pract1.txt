Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 


ЗВІТ 
до практичного заняття № 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: “Правила оформлення програмного коду”




Виконав: 
ст. гр ПЗПІ-22-3
Ткаченко Євген Андрійович
     
Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 




Харків 2024
1 МЕТА 

Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду.	

2 ХІД РОБОТИ

Було обрано мову програмування Java. У презентації (Додаток В) було наведено основні рекомендації щодо оформлення програмного коду, а також приклад коду до і після застосування цих рекомендацій.

ВИСНОВКИ

У результаті роботи я повністю дослідив та використав на практиці правила дотримання конвенцій написання коду на Java, та вивчив правила яких потрібно дотримуватися, щоб код був зрозумілим і підтримуваним.









ДОДАТОК A
Посилання на відео

https://youtu.be/lEaQUXGRl4o






















ДОДАТОК Б
Вихідний код

1. // Іменування
2. // Поганий приклад
3. public class processDATA {
4.     public int NUMBER;
5. 
6.     public void doIt(int nUMBER) {
7.         this.NUMBER = nUMBER;
8.         System.out.println("Processing number: " + NUMBER);
9.     }
10. }
11. 
12. // Гарний приклад
13. public class DataProcessor {
14.     private int number;
15. 
16.     public void process(int inputNumber) {
17.         this.number = inputNumber;
18.         System.out.println("Processing number: " + number);
19.     }
20. }

1. //Обробка виключень
2.     // Поганий приклад
3.     public void readFile(String fileName) {
4.         try {
5.             FileReader reader = new FileReader(fileName);
6.             BufferedReader bufferedReader = new BufferedReader(reader);
7.             System.out.println(bufferedReader.readLine());
8.         } catch (Exception e) {
9.             System.out.println("Error occurred.");
10.         }
11.     }
12.     // Гарний приклад
13.     public void readFile(String fileName) {
14.         try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileName))) {
15.             System.out.println(bufferedReader.readLine());
16.         } catch (FileNotFoundException e) {
17.             System.err.println("File not found: " + fileName);
18.         } catch (IOException e) {
19.             System.err.println("Failed to read the file: " + fileName);
20.         }
21.     }

1.  //Обробка Null
2.     // Поганий приклад
3.     public void getUserName(User user) {
4.         if (user != null && user.getName() != null) {
5.             System.out.println(user.getName());
6.         } else {
7.             System.out.println("Unknown");
8.         }
9.     }
10.     // Гарний приклад
11.     public void printUserName(User user) {
12.         Optional<String> userName = Optional.ofNullable(user)
13.                 .map(User::getName);
14. 
15.         userName.ifPresentOrElse(
16.                 System.out::println,
17.                 () -> System.out.println("Unknown")
18.         );
19.     }

1. //Перевантаження методів та Varargs
2.     // Поганий приклад
3.     public void processOrder(String orderId, String... items) {
4.         if (items == null || items.length == 0) {
5.             throw new IllegalArgumentException("Items cannot be null or empty");
6.         }
7.         System.out.println("Processing order: " + orderId);
8.         for (String item : items) {
9.             System.out.println(" - Item: " + item);
10.         }
11.     }
12.     // Гарний приклад
13.     public void processOrder(String orderId, List<String> items) {
14.         if (items == null || items.isEmpty()) {
15.             throw new IllegalArgumentException("Items cannot be null or empty");
16.         }
17.         System.out.println("Processing order: " + orderId);
18.         for (String item : items) {
19.             System.out.println(" - Item: " + item);
20.         }
21.     }

1.     //Рефакторинг за допомогою потоків і лямбд
2.     // Поганий приклад
3.     public class OrderService {
4. 
5.         public double calculateTotalPrice(List<Order> orders) {
6.             double total = 0;
7.             for (Order order : orders) {
8.                 if (order.getStatus().equals("COMPLETED")) {
9.                     total += order.getPrice();
10.                 }
11.             }
12.             return total;
13.         }
14.     }
15.     // Гарний приклад
16.     public class OrderService {
17. 
18.         public double calculateTotalPrice(List<Order> orders) {
19.             return orders.stream()
20.                     .filter(order -> "COMPLETED".equals(order.getStatus()))
21.                     .mapToDouble(Order::getPrice)
22.                     .sum();
23.         }
24.     }

1. //Примітивні типи та класи обгорток
2.     // Поганий приклад
3.     public class UserAgeService {
4. 
5.         public Integer calculateAge(Integer birthYear) {
6.             Integer currentYear = 2024;
7.             if (birthYear == null) {
8.                 throw new IllegalArgumentException("Birth year must not be null");
9.             }
10.             return currentYear - birthYear;
11.         }
12.     }
13.     // Гарний приклад
14.     public class UserAgeService {
15. 
16.         public int calculateAge(int birthYear) {
17.             int currentYear = 2024;
18.             if (birthYear <= 0 || birthYear > currentYear) {
19.                 throw new IllegalArgumentException("Invalid birth year");
20.             }
21.             return currentYear - birthYear;
22.         }
23.     }







ДОДАТОК В
Презентація pzpi-22-3-tkachenko-yevhen-pract1.pptx
     
 
Рисунок В.1 – Титульний лист

 
Рисунок В.2 – Іменування класів і змінних.

 
Рисунок В.3 – Приклад іменування.

 
Рисунок В.4 – Обробка виключень.

 
Рисунок В.5 – Приклад обробки виключень.
 
Рисунок В.6 – Обробка Null.

 
Рисунок В.7 – Приклад обробки Null.
 
Рисунок В.8 – Перевантаження методів та Varargs.

 
Рисунок В.9 – Приклад використання колекцій замість Varargs.
 
Рисунок В.10 – Рефакторинг за допомогою потоків і лямбд.

 
Рисунок В.11 – Приклад рефакторингу за допомогою потоків і лямбд.
 
Рисунок В.12 – Примітивні типи та класи обгорток.

 
Рисунок В.13 – Приклад використання класу обгорток.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

1. Java Code Conventions. Oracle. URL: https://www.oracle.com/java/technologies/javase/codeconventions-contents.html (дата використання: 27.11.2024)
