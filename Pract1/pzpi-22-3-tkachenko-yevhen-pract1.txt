Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 

ЗВІТ 
до практичного заняття № 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: “Правила оформлення програмного коду”

Виконав: 
ст. гр ПЗПІ-22-3
Ткаченко Євген Андрійович
     
Перевірив:
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 


Харків 2024
1 МЕТА 
Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду.	

2 ХІД РОБОТИ
Було обрано мову програмування Java. У презентації (Додаток В) було наведено основні рекомендації щодо оформлення програмного коду. У додатку Б наведений вихідний код.

2.1 Іменування класів і змінних.

Імена класів мають бути з великої літери (PascalCase).
Кожен клас зберігаєтся в окремому .java файлі, назва якого співпадає з назвою файлу.
Імена змінних та методів пишуться з маленької літери (camelCase).
Імена мають бути інформативними, відображати функціональність змінної чи методу.

2.2 Використання відступів та пробілів.

Відступи: використовуйте 4 пробіли для відступів. Це значно покращує читабельність коду.
Довжина рядка: обмежуйте довжину рядка до 80 символів, щоб уникнути горизонтального прокручування.
Розташування фігурних дужок: у Java прийнято відкривати фігурну дужку на тій же лінії, де починається конструкція (метод чи цикл).

2.3 Javadoc.

Якісна документація дозволяє іншим розробникам швидко зрозуміти функціональність коду. Вона повинна бути зрозумілою, лаконічною і точною, пояснюючи, що робить метод або клас, які його вхідні та вихідні параметри, а також його поведінка. Обов’язкова для публічних класів.

2.4 Обробка виключень

При рефакторингу виключень важливо уникати загальних обробників, таких як catch (Exception e), оскільки вони можуть приховати причини помилок та ускладнити налагодження. Замість цього слід використовувати специфічні виключення для точнішої обробки кожного сценарію.

ВИСНОВКИ 
	У результаті роботи я повністю дослідив та використав на практиці правила дотримання конвенцій написання коду на Java, та вивчив правила яких потрібно дотримуватися, щоб код був зрозумілим і підтримуваним.
ДОДАТОК A
Посилання на відео

https://youtu.be/wQLxxYKOAI0


ДОДАТОК Б
Вихідний код

1. // Іменування
2. // Поганий приклад
3. public class processDATA {
4.     public int NUMBER;
5. 
6.     public void doIt(int nUMBER) {
7.         this.NUMBER = nUMBER;
8.         System.out.println("Processing number: " + NUMBER);
9.     }
10. }
11. 
12. // Гарний приклад
13. public class DataProcessor {
14.     private int number;
15. 
16.     public void process(int inputNumber) {
17.         this.number = inputNumber;
18.         System.out.println("Processing number: " + number);
19.     }
20. }

1. //Поганий приклад Використання відступів та пробілів
2. @PostMapping("/users")
3. public ResponseEntity createUser(@RequestBody User user){if(user!=null){userService.save(user);return ResponseEntity.ok("User created");}else{return ResponseEntity.badRequest().body("Invalid user");}}
4. //Гарний приклад
5. @PostMapping("/users")
6. public ResponseEntity createUser(@RequestBody User user) {
7.     if (user != null) {
8.         userService.save(user);
9.         return ResponseEntity.ok("User created");
10.     } else {
11.         return ResponseEntity.badRequest().body("Invalid user");
12.     }
13. }

1.     // Поганий приклад Javadoc
2.     public Response getUserInfo(int userId) {
3.         User user = userService.getUserById(userId);
4.         return Response.ok(user).build();
5.     }
6.     // Гарний приклад Javadoc
7.     /**
8.      * Отримує інформацію про користувача за його ID.
9.      *
10.      * @param userId ID користувача, чию інформацію потрібно отримати
11.      * @return Response з інформацією про користувача
12.      * @throws NotFoundException якщо користувач не знайдений
13.      */
14.     public Response getUserInfo(int userId) {
15.         User user = userService.getUserById(userId);
16.         if (user == null) {
17.             throw new NotFoundException("User not found");
18.         }
19.         return Response.ok(user).build();
20.     }

1. //Обробка виключень
2.     // Поганий приклад
3.     public void readFile(String fileName) {
4.         try {
5.             FileReader reader = new FileReader(fileName);
6.             BufferedReader bufferedReader = new BufferedReader(reader);
7.             System.out.println(bufferedReader.readLine());
8.         } catch (Exception e) {
9.             System.out.println("Error occurred.");
10.         }
11.     }
12.     // Гарний приклад
13.     public void readFile(String fileName) {
14.         try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileName))) {
15.             System.out.println(bufferedReader.readLine());
16.         } catch (FileNotFoundException e) {
17.             System.err.println("File not found: " + fileName);
18.         } catch (IOException e) {
19.             System.err.println("Failed to read the file: " + fileName);
20.         }
21.     }








ДОДАТОК В
Презентація pzpi-22-3-tkachenko-yevhen-pract1.pptx
     
 
Рисунок В.1 – Титульний лист

 
Рисунок В.2 – Іменування класів і змінних.

 
Рисунок В.3 – Приклад іменування.

 
Рисунок В.4 – Використання відступів та пробілів.

 
Рисунок В.5 – Приклад використання відступів та пробілів.

 
Рисунок В.6 – Javadoc.

 
Рисунок В.7 – Приклад Javadoc.

 
Рисунок В.8 – Обробка виключень.

 
Рисунок В.9 – Приклад обробки виключень.

 
Рисунок В.10 – Список використаних джерел.











СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

	1. Java Code Conventions. Oracle. URL: https://www.oracle.com/java/technologies/javase/codeconventions-contents.html (дата використання: 27.11.2024)
